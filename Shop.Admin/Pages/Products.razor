@page "/products"
@using Shop.Admin.Services
@using Shop.DataModels.CustomModels
@inject IAdminPanelService adminPanelService;

@if (productModel == null)
{
    <p><em>Loading.....</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Product</h4>
        <div class="card-body">
        </div>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Name :</label>
                        <InputText @bind-Value="productModel.Name" class="form-control" />
                        <ValidationMessage For="@(()=> productModel.Name)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Price :</label>
                        <InputNumber @bind-Value="productModel.Price" class="form-control" />
                        <ValidationMessage For="@(()=> productModel.Price)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Stock :</label>
                        <InputNumber @bind-Value="productModel.Stock" class="form-control" />
                        <ValidationMessage For="@(()=>productModel.Stock)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Select Category :</label>
                        @if (categoryList != null)
                        {
                            <select class="form-control" @onchange="@CategoryClicked">
                                <option value="">-- Select --</option>
                                @foreach (var cat in categoryList)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </select>
                        }
                        <ValidationMessage For="@(()=> productModel.CategoryId)" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Select Photo :</label>
                        <label style="border:1px ridge #808080;">
                            <InputFile OnChange="@OnInputFileChange" multiple />
                        </label>
                        <ValidationMessage For="@(()=> productModel.FileName)" />

                        <table style="border:1px ridge #808080;">
                            <tr>
                                @foreach (var imgsrc in imageUrls)
                                {
                                    <td>
                                        <img src="@imgsrc" />
                                    </td>
                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm" />
                </div>
            </EditForm>
        </div>
        <div class="card-body">

        </div>
    </div>
}

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<CategoryModel>? categoryList { get; set; }

    public ProductModel? productModel { get; set; }
    public List<ProductModel>? productList { get; set; }

    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile>? selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel? productToUpdate { get; set; }
    public ProductModel? productToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        categoryList = await adminPanelService.GetCategories();
    }

    private async Task SaveProduct()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
